name: Build and Deploy to EB

on:
  push:
    branches:
      - main  # Ejecutar el pipeline cuando se hace push a la rama principal

env:
  AWS_REGION: 'us-east-1'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ECR_REPO_NAME: 'ticketgo'
  AWS_ECR_REPO_LINK: '970547369787.dkr.ecr.us-east-1.amazonaws.com/ticketgo'
  AWS_ECR_REPO_PATH: '970547369787.dkr.ecr.us-east-1.amazonaws.com'
  AWS_ECS_CLUSTER_NAME: 'ticketgo_api'
  AWS_ECS_SERVICE_NAME: 'ticketgo'
  IMAGE_URI: '970547369787.dkr.ecr.us-east-1.amazonaws.com/ticketgo'
  AWS_ACCOUNT_ID: '9705-4736-9787'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'


      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Run all tests
        run: ./gradlew testClasses


      - name: Build with Gradle
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
        with:
          arguments: build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Package
          path: build/libs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"  

  deploy-ecs:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to ECS
        env:
          CLUSTER_NAME: ${{ env.AWS_ECS_CLUSTER_NAME }}
          SERVICE_NAME: ${{ env.AWS_ECS_SERVICE_NAME }}
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --region $AWS_REGION